<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BinanceTrackerDesktop</name>
    </assembly>
    <members>
        <member name="T:BinanceTrackerDesktop.Awaitable.Awaitables.IAwaitableAsyncExecute">
            <summary>
            For awaitable component, an a interface that giving a special method when application closing started, and it wait`s while method doing things.
            <para>It executes automatically at runtime via <see langword="Reflection"/></para>
            </summary>
        </member>
        <member name="M:BinanceTrackerDesktop.Awaitable.Awaitables.IAwaitableAsyncExecute.OnExecuteAsync">
            <summary>
            Execute`s <see langword="async"/> when application is closing, its wait`s while you were not done with method execution.
            </summary>
            <returns><see cref="P:System.Threading.Tasks.Task.CompletedTask"/></returns>
        </member>
        <member name="T:BinanceTrackerDesktop.Awaitable.Awaitables.IAwaitableComplete">
            <summary>
            For awaitable component, an a interface that giving a special method when application closing is completed.
            <para>It executes automatically at runtime via <see langword="Reflection"/></para>
            </summary>
        </member>
        <member name="M:BinanceTrackerDesktop.Awaitable.Awaitables.IAwaitableComplete.OnComplete">
            <summary>
            Execute`s when application closing is completed.
            </summary>
        </member>
        <member name="T:BinanceTrackerDesktop.Awaitable.Awaitables.IAwaitableExecute">
            <summary>
            For awaitable component, an a interface that giving a special method when application closing started.
            <para>It executes automatically at runtime via <see langword="Reflection"/></para>
            </summary>
        </member>
        <member name="M:BinanceTrackerDesktop.Awaitable.Awaitables.IAwaitableExecute.OnExecute">
            <summary>
            Execute`s when application is closing.
            </summary>
        </member>
        <member name="T:BinanceTrackerDesktop.Awaitable.Awaitables.IAwaitableObserverInstance">
            <summary>
            For awaitable component, an a interface that giving a special property instance.
            <para>It executes automatically at runtime via <see langword="Reflection"/></para>
            </summary>
        </member>
        <member name="P:BinanceTrackerDesktop.Awaitable.Awaitables.IAwaitableObserverInstance.Observer">
            <summary>
            Instance to the observer.
            </summary>
        </member>
        <member name="T:BinanceTrackerDesktop.Awaitable.Awaitables.IAwaitableSingletonObject">
            <summary>
            For awaitable component, an a simple singleton to give a easy work with your object, without this nothing is going to be work. 
            <para>It executes automatically at runtime via <see langword="Reflection"/></para>
            </summary>
        </member>
        <member name="P:BinanceTrackerDesktop.Awaitable.Awaitables.IAwaitableSingletonObject.Instance">
            <summary>
            Instance to the this object.
            </summary>
        </member>
        <member name="T:BinanceTrackerDesktop.Awaitable.Awaitables.IAwaitableStart">
            <summary>
            For awaitable component, an a interface that giving a special method when application close is starting.
            <para>It executes automatically at runtime via <see langword="Reflection"/></para>
            </summary>
        </member>
        <member name="M:BinanceTrackerDesktop.Awaitable.Awaitables.IAwaitableStart.OnStart">
            <summary>
            Execute`s when application closing started.
            </summary>
        </member>
        <member name="T:BinanceTrackerDesktop.Awaitable.Observer.IAwaitablesObserver">
            <summary>
            Observer for Awaitables.
            </summary>
        </member>
        <member name="P:BinanceTrackerDesktop.Awaitable.Observer.IAwaitablesObserver.Callbacks">
            <summary>
            All registered callbacks.
            </summary>
        </member>
        <member name="M:BinanceTrackerDesktop.Awaitable.Observer.IAwaitablesObserver.RegisterListener(System.Type)">
            <summary>
            Registering a given type.
            </summary>
            <param name="type">Type for register.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:BinanceTrackerDesktop.Awaitable.Observer.IAwaitablesObserver.RegisterListeners(System.Type[])">
            <summary>
            Registering all given types, by calling method <see cref="M:BinanceTrackerDesktop.Awaitable.Observer.IAwaitablesObserver.RegisterListener(System.Type)"/>
            </summary>
            <param name="types">Types for registering.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:BinanceTrackerDesktop.Awaitable.Observer.IAwaitablesObserver.RegisterListeners(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Registering all given types, by calling method <see cref="M:BinanceTrackerDesktop.Awaitable.Observer.IAwaitablesObserver.RegisterListener(System.Type)"/>
            </summary>
            <param name="types">Types for registering.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:BinanceTrackerDesktop.Awaitable.Observer.IAwaitablesObserver.CallListenersAsync">
            <summary>
            Calling registered listeners in next order:
            <para><see cref="T:BinanceTrackerDesktop.Awaitable.Awaitables.IAwaitableObserverInstance"/>;</para> 
            <para><see cref="T:BinanceTrackerDesktop.Awaitable.Awaitables.IAwaitableStart"/>;</para>
            <para><see cref="T:BinanceTrackerDesktop.Awaitable.Awaitables.IAwaitableExecute"/>;</para>
            <para><see cref="T:BinanceTrackerDesktop.Awaitable.Awaitables.IAwaitableAsyncExecute"/>;</para>
            <para><see cref="T:BinanceTrackerDesktop.Awaitable.Awaitables.IAwaitableComplete"/></para>
            </summary>
            <returns>Completed task.</returns>
        </member>
        <member name="T:BinanceTrackerDesktop.Awaitable.Provider.IAwaitablesProvider">
            <summary>
            Provider for registering Awaitables.
            </summary>
        </member>
        <member name="P:BinanceTrackerDesktop.Awaitable.Provider.IAwaitablesProvider.Observer">
            <summary>
            Instance to the <see cref="T:BinanceTrackerDesktop.Awaitable.Observer.IAwaitablesObserver"/>
            </summary>
        </member>
        <member name="P:BinanceTrackerDesktop.Awaitable.Provider.IAwaitablesProvider.IsRegistered">
            <summary>
            Returning <see langword="true"/> if method <see cref="M:BinanceTrackerDesktop.Awaitable.Provider.IAwaitablesProvider.RegisterAwaitablesOnce"/> was already ever called once, <see langword="false"/> if yet not.
            </summary>
        </member>
        <member name="M:BinanceTrackerDesktop.Awaitable.Provider.IAwaitablesProvider.RegisterAwaitablesOnce">
            <summary>
            Registering awaitables at the end set to <see cref="P:BinanceTrackerDesktop.Awaitable.Provider.IAwaitablesProvider.IsRegistered"/> to <see langword="true"/>.
            <br>Registering only once in next order:</br>
            <para><see cref="T:BinanceTrackerDesktop.Awaitable.Awaitables.IAwaitableObserverInstance"/>;</para> 
            <para><see cref="T:BinanceTrackerDesktop.Awaitable.Awaitables.IAwaitableStart"/>;</para>
            <para><see cref="T:BinanceTrackerDesktop.Awaitable.Awaitables.IAwaitableAsyncExecute"/>;</para>
            <para><see cref="T:BinanceTrackerDesktop.Awaitable.Awaitables.IAwaitableComplete"/></para>
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:BinanceTrackerDesktop.Awaitable.Provider.Utilities.Reflection.ReflectionInterfacesFromTypesReceiverUtility.GetInterfacesFromTypes``1(System.Type[])">
            <summary>
            Receives all interfaces from given <paramref name="types"/>
            </summary>
            <typeparam name="TInterfaceTarget">Target for Interfaces searching.</typeparam>
            <param name="types">Types.</param>
            <returns>Received interfaces.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:BinanceTrackerDesktop.Awaitable.Provider.Utilities.Reflection.ReflectionInterfacesFromTypesReceiverUtility.GetInterfacesFromAssemblyTypes``1">
            <summary>
            Receives all interfaces by calling method <see cref="M:BinanceTrackerDesktop.Awaitable.Provider.Utilities.Reflection.ReflectionInterfacesFromTypesReceiverUtility.GetInterfacesFromTypes``1(System.Type[])"/>, from giving types from current executing <see cref="T:System.Reflection.Assembly"/>
            </summary>
            <typeparam name="TInterfaceTarget">Target for Interfaces searching.</typeparam>
            <returns>Received interfaces.</returns>
        </member>
        <member name="P:BinanceTrackerDesktop.Localizations.Translation.ITranslation.Localization">
            <summary>
            Gets the localization.
            </summary>
        </member>
        <member name="M:BinanceTrackerDesktop.Localizations.Translation.ITranslation.Translate(System.String)">
            <summary>
            Translates the given <paramref name="key"/>.
            </summary>
            <param name="key">The key.</param>
            <returns>The value from translated <paramref name="key"/>.</returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:BinanceTrackerDesktop.Localizations.Exceptions.TranslationKeyWasNotFoundException"></exception>
        </member>
        <member name="T:BinanceTrackerDesktop.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:BinanceTrackerDesktop.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:BinanceTrackerDesktop.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:BinanceTrackerDesktop.Themes.Detectors.Data.IThemeDataDetector">
            <summary>
            User theme detector.
            </summary>
        </member>
        <member name="P:BinanceTrackerDesktop.Themes.Detectors.Data.IThemeDataDetector.ThemeRecognizer">
            <summary>
            The system theme recognizer.
            </summary>
        </member>
        <member name="M:BinanceTrackerDesktop.Themes.Detectors.Data.IThemeDataDetector.DetectThemeDataRepository">
            <summary>
            Getting theme and reading it from <see cref="!:ThemeRepository"/>
            </summary>
            <returns>Instance to the theme data reader.</returns>
            <exception cref="T:BinanceTrackerDesktop.Themes.Repositories.Readers.Exceptions.ThemeCannotBeRecognizedException"></exception>
        </member>
        <member name="T:BinanceTrackerDesktop.Themes.Recognizers.ISystemThemeRecognizer">
            <summary>
            System theme recognizer.
            </summary>
        </member>
        <member name="M:BinanceTrackerDesktop.Themes.Recognizers.ISystemThemeRecognizer.RecognizeTheme">
            <summary>
            Recognizing system theme.
            </summary>
            <returns>Recognized theme.</returns>
            <exception cref="T:BinanceTrackerDesktop.Themes.Repositories.Readers.Exceptions.ThemeCannotBeRecognizedException"></exception>
        </member>
        <member name="T:BinanceTrackerDesktop.Themes.Repositories.Readers.IThemeDataRepository">
            <summary>
            Repository for reading custom theme data.
            </summary>
        </member>
        <member name="M:BinanceTrackerDesktop.Themes.Repositories.Readers.IThemeDataRepository.GetThemeData">
            <summary>
            Reading theme data.
            </summary>
            <returns>Readed theme data.</returns>
        </member>
        <member name="T:BinanceTrackerDesktop.Themes.Theme">
            <summary>
            Theme name.
            </summary>
        </member>
        <member name="F:BinanceTrackerDesktop.Themes.Theme.System">
            <summary>
            Operation System Theme.
            </summary>
        </member>
        <member name="F:BinanceTrackerDesktop.Themes.Theme.ColorBlind">
            <summary>
            Color blind Theme.
            </summary>
        </member>
        <member name="F:BinanceTrackerDesktop.Themes.Theme.Light">
            <summary>
            Light Theme.
            </summary>
        </member>
        <member name="F:BinanceTrackerDesktop.Themes.Theme.Dark">
            <summary>
            Dark Theme.
            </summary>
        </member>
        <member name="T:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder">
            <summary>
            Represents a builder for the <see cref="T:BinanceTrackerDesktop.User.Data.UserData"/>.
            </summary>
        </member>
        <member name="M:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder.AddKey(System.String)">
            <summary>
            Adding <see cref="P:BinanceTrackerDesktop.User.Data.UserData.Key"/> to the <see cref="T:BinanceTrackerDesktop.User.Data.UserData"/>
            </summary>
            <param name="value">Adding value.</param>
            <returns>Instance to the <see cref="T:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder"/></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder.AddSecret(System.String)">
            <summary>
            Adding <see cref="P:BinanceTrackerDesktop.User.Data.UserData.Secret"/> to the <see cref="T:BinanceTrackerDesktop.User.Data.UserData"/>
            </summary>
            <param name="value">Adding value.</param>
            <returns>Instance to the <see cref="T:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder"/></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder.AddCurrency(System.String)">
            <summary>
            Adding <see cref="P:BinanceTrackerDesktop.User.Data.UserData.Currency"/> to the <see cref="T:BinanceTrackerDesktop.User.Data.UserData"/>
            </summary>
            <param name="value">Adding value.</param>
            <returns>Instance to the <see cref="T:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder"/></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder.AddBestBalance(System.Nullable{System.Decimal})">
            <summary>
            Adding <see cref="P:BinanceTrackerDesktop.User.Data.UserData.BestBalance"/> to the <see cref="T:BinanceTrackerDesktop.User.Data.UserData"/>
            </summary>
            <param name="value">Adding value.</param>
            <returns>Instance to the <see cref="T:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder"/></returns>
        </member>
        <member name="M:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder.AddTwoFactor(BinanceTrackerDesktop.User.Authentication.Data.UserTwoFactorAuthenticationData)">
            <summary>
            Adding <paramref name="authentication"/> to the <see cref="T:BinanceTrackerDesktop.User.Data.UserData"/>
            </summary>
            <param name="authentication">Adding authentication.</param>
            <returns>Instance to the <see cref="T:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder"/></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder.AddNotificationsStateBasedOnData(System.Nullable{System.Boolean})">
            <summary>
            Adding <see cref="P:BinanceTrackerDesktop.User.Data.UserData.IsNotificationsEnabled"/> to the <see cref="T:BinanceTrackerDesktop.User.Data.UserData"/> based on <paramref name="value"/>
            </summary>
            <param name="value">Adding value.</param>
            <returns>Instance to the <see cref="T:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder"/></returns>
        </member>
        <member name="M:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder.AddBalancesStateBasedOnData(System.Nullable{System.Boolean})">
            <summary>
            Adding <see cref="P:BinanceTrackerDesktop.User.Data.UserData.IsBalancesHiden"/> to the <see cref="T:BinanceTrackerDesktop.User.Data.UserData"/> based on <paramref name="value"/>
            </summary>
            <param name="value">Adding value.</param>
            <returns>Instance to the <see cref="T:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder"/></returns>
        </member>
        <member name="M:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder.AddUserTheme(BinanceTrackerDesktop.Themes.Theme)">
            <summary>
            Adding <see cref="P:BinanceTrackerDesktop.User.Data.UserData.Theme"/> to the given <paramref name="theme"/>
            </summary>
            <param name="theme">Adding Theme.</param>
            <returns>Instance to the <see cref="T:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder"/></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder.SetBalancesHiden">
            <summary>
            Set <see cref="P:BinanceTrackerDesktop.User.Data.UserData.IsBalancesHiden"/> <see langword="true"/> to the <see cref="T:BinanceTrackerDesktop.User.Data.UserData"/>
            </summary>
            <returns>Instance to the <see cref="T:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder"/></returns>
        </member>
        <member name="M:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder.SetBalancesIsNotHiden">
            <summary>
            Set <see cref="P:BinanceTrackerDesktop.User.Data.UserData.IsBalancesHiden"/> <see langword="false"/> to the <see cref="T:BinanceTrackerDesktop.User.Data.UserData"/>
            </summary>
            <returns>Instance to the <see cref="T:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder"/></returns>
        </member>
        <member name="M:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder.SetNotificationsDisabled">
            <summary>
            Set <see cref="P:BinanceTrackerDesktop.User.Data.UserData.IsNotificationsEnabled"/> state to <see langword="false"/> to the <see cref="T:BinanceTrackerDesktop.User.Data.UserData"/>
            </summary>
            <returns>Instance to the <see cref="T:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder"/></returns>
        </member>
        <member name="M:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder.SetNotificationsEnabled">
            <summary>
            Set <see cref="P:BinanceTrackerDesktop.User.Data.UserData.IsNotificationsEnabled"/> to <see langword="true"/> to the <see cref="T:BinanceTrackerDesktop.User.Data.UserData"/>
            </summary>
            <returns>Instance to the <see cref="T:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder"/></returns>
        </member>
        <member name="M:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder.SetAsUserStartedApplicationFirstTime">
            <summary>
            Set <see cref="P:BinanceTrackerDesktop.User.Data.UserData.IsUserStartedApplicationFirstTime"/> to <see langword="true"/> to the <see cref="T:BinanceTrackerDesktop.User.Data.UserData"/>
            </summary>
            <returns>Instance to the <see cref="T:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder"/></returns>
        </member>
        <member name="M:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder.SetAsUserStartedApplicationNotFirstTime">
            <summary>
            Set <see cref="P:BinanceTrackerDesktop.User.Data.UserData.IsUserStartedApplicationFirstTime"/> to <see langword="false"/> to the <see cref="T:BinanceTrackerDesktop.User.Data.UserData"/>
            </summary>
            <returns>Instance to the <see cref="T:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder"/></returns>
        </member>
        <member name="M:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder.SetUserThemeAsSystem">
            <summary>
            Set User Theme to <see cref="F:BinanceTrackerDesktop.Themes.Theme.System"/> by calling method <see cref="M:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder.AddUserTheme(BinanceTrackerDesktop.Themes.Theme)"/>
            </summary>
            <returns>Instance to the <see cref="T:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder"/></returns>
        </member>
        <member name="M:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder.SetUserThemeAsColorBlind">
            <summary>
            Set User Theme to <see cref="F:BinanceTrackerDesktop.Themes.Theme.ColorBlind"/> by calling method <see cref="M:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder.AddUserTheme(BinanceTrackerDesktop.Themes.Theme)"/>
            </summary>
            <returns>Instance to the <see cref="T:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder"/></returns>
        </member>
        <member name="M:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder.SetUserThemeAsLight">
            <summary>
            Set User Theme to <see cref="F:BinanceTrackerDesktop.Themes.Theme.Light"/> by calling method <see cref="M:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder.AddUserTheme(BinanceTrackerDesktop.Themes.Theme)"/>
            </summary>
            <returns>Instance to the <see cref="T:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder"/></returns>
        </member>
        <member name="M:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder.SetUserThemeAsDark">
            <summary>
            Set User Theme to <see cref="F:BinanceTrackerDesktop.Themes.Theme.Dark"/> by calling method <see cref="M:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder.AddUserTheme(BinanceTrackerDesktop.Themes.Theme)"/>
            </summary>
            <returns>Instance to the <see cref="T:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder"/></returns>
        </member>
        <member name="M:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder.Build">
            <summary>
            Building the <see cref="T:BinanceTrackerDesktop.User.Data.Builder.IUserDataBuilder"/>
            </summary>
            <returns>Builded <see cref="T:BinanceTrackerDesktop.User.Data.UserData"/></returns>
        </member>
        <member name="T:BinanceTrackerDesktop.User.Status.Detector.IUserStatusDetector">
            <summary>
            User status detector.
            </summary>
        </member>
        <member name="M:BinanceTrackerDesktop.User.Status.Detector.IUserStatusDetector.GetStatus">
            <summary>
            Detect user status.
            </summary>
            <returns>User status.</returns>
        </member>
        <member name="M:BinanceTrackerDesktop.Forms.Authentication.AuthenticationFormView.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:BinanceTrackerDesktop.Forms.Authorization.TrackerAuthorizationFormView.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:BinanceTrackerDesktop.Forms.Tray.TrackerTrayForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:BinanceTrackerDesktop.Views.Authenticator.AuthenticatorFormView.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:ApplicationConfiguration">
            <summary>
             Bootstrap the application configuration.
            </summary>
        </member>
        <member name="M:ApplicationConfiguration.Initialize">
            <summary>
             Bootstrap the application as follows:
             <code>
             Application.EnableVisualStyles();
             Application.SetCompatibleTextRenderingDefault(false);
             Application.SetHighDpiMode(HighDpiMode.SystemAware);
            </code>
            </summary>
        </member>
    </members>
</doc>
